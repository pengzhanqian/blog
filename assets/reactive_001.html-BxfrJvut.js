import{_ as i}from"./reactive-programming-learn-BtPCE2Kb.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,f as p,d as r,w as n,r as c,o as d,b as a}from"./app-BxRTHQDl.js";const g="/blog/assets/image-20250626134543421-BmHyQ_pD.png",h={},u={class:"table-of-contents"};function b(m,e){const o=c("router-link");return d(),l("div",null,[e[7]||(e[7]=t("h1",{id:"第一章-走进响应式编程",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#第一章-走进响应式编程"},[t("span",null,"第一章: 走进响应式编程")])],-1)),t("nav",u,[t("ul",null,[t("li",null,[r(o,{to:"#【1】响应式编程介绍"},{default:n(()=>e[0]||(e[0]=[a("【1】响应式编程介绍")])),_:1,__:[0]}),t("ul",null,[t("li",null,[r(o,{to:"#_1-1-什么是响应式"},{default:n(()=>e[1]||(e[1]=[a("1.1 什么是响应式?")])),_:1,__:[1]})]),t("li",null,[r(o,{to:"#_1-2-什么是响应式处理"},{default:n(()=>e[2]||(e[2]=[a("1.2 什么是响应式处理?")])),_:1,__:[2]})]),t("li",null,[r(o,{to:"#_1-3-为什么需要用到响应式处理"},{default:n(()=>e[3]||(e[3]=[a("1.3 为什么需要用到响应式处理?")])),_:1,__:[3]})]),t("li",null,[r(o,{to:"#_1-4-基于-spring-boot-的响应式微服务架构‌"},{default:n(()=>e[4]||(e[4]=[a("1.4 基于 Spring Boot 的响应式微服务架构‌")])),_:1,__:[4]})])])]),t("li",null,[r(o,{to:"#【2】-响应式编程学习路线图"},{default:n(()=>e[5]||(e[5]=[a("【2】 响应式编程学习路线图")])),_:1,__:[5]})]),t("li",null,[r(o,{to:"#【3】参考资料"},{default:n(()=>e[6]||(e[6]=[a("【3】参考资料")])),_:1,__:[6]})])])]),e[8]||(e[8]=p('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a>后进行总结的文章，本文主要用于<b>响应式编程</b>。</p></blockquote><h2 id="【1】响应式编程介绍" tabindex="-1"><a class="header-anchor" href="#【1】响应式编程介绍"><span>【1】响应式编程介绍</span></a></h2><p>我们可以打开Spring的官网找到Reactive的相关资料。<a href="https://spring.io/reactive" target="_blank" rel="noopener noreferrer">响应式资料链接</a></p><h3 id="_1-1-什么是响应式" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是响应式"><span>1.1 什么是响应式?</span></a></h3><div class="hint-container info"><p class="hint-container-title">什么是响应式(Reactive)系统?</p><p>首先，看下官网定义</p><blockquote><h1 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>Reactive</span></a></h1><p>Reactive systems have certain characteristics that make them ideal for low-latency, high-throughput workloads. Project Reactor and the Spring portfolio work together to enable developers to build enterprise-grade reactive systems that are responsive, resilient, elastic, and message-driven.</p></blockquote><p>翻译过来则是:</p><blockquote><h1 id="响应式-reactive" tabindex="-1"><a class="header-anchor" href="#响应式-reactive"><span>响应式 (Reactive)</span></a></h1><p>响应式系统具有某些特性，使其成为处理‌<strong>低延迟、高吞吐量工作负载</strong>‌的理想选择。Project Reactor 框架与 Spring 产品组合协同工作，帮助开发者构建具有‌<strong>响应灵敏、弹性恢复、灵活伸缩和消息驱动</strong>‌特性的企业级响应式系统。</p></blockquote></div><p>可以发现，<strong>响应式</strong> 其实就是1个目标词汇，它的效果为：</p><ul><li><p><strong>低延迟 low-latency</strong></p></li><li><p><strong>高吞吐量 high-throughput</strong></p></li><li><p><strong>高负载 high-workloads</strong></p></li></ul><p><strong>响应式</strong> 的特性有以下4个:</p><ul><li><p><strong>响应灵敏 responsive</strong></p></li><li><p><strong>弹性恢复 resilient</strong></p></li><li><p><strong>灵活伸缩 elastic</strong></p></li><li><p><strong>消息驱动 message-driven</strong></p></li></ul><h3 id="_1-2-什么是响应式处理" tabindex="-1"><a class="header-anchor" href="#_1-2-什么是响应式处理"><span>1.2 什么是响应式处理?</span></a></h3><div class="hint-container info"><p class="hint-container-title">什么是响应式处理？</p><p>官方定义如下：</p><blockquote><h1 id="what-is-reactive-processing" tabindex="-1"><a class="header-anchor" href="#what-is-reactive-processing"><span>What is reactive processing?</span></a></h1><p>Reactive processing is a paradigm that enables developers build non-blocking, asynchronous applications that can handle back-pressure (flow control).</p></blockquote><p>翻译过来如下:</p><blockquote><h1 id="什么是响应式处理" tabindex="-1"><a class="header-anchor" href="#什么是响应式处理"><span>什么是响应式处理?</span></a></h1><p><strong>响应式处理</strong>‌是一种编程范式，使开发者能够‌<strong>构建非阻塞、异步的应用程序</strong>‌，并能处理<strong>背压机制(流量控制)</strong></p></blockquote></div><h4 id="术语解析" tabindex="-1"><a class="header-anchor" href="#术语解析"><span>术语解析</span></a></h4><ol><li><strong>非阻塞(Non-blocking)</strong> ‌:<br> 应用程序线程无需等待 I/O 操作完成，可立即处理其他任务。</li><li>‌<strong>异步(Asynchronous)</strong> ‌ ‌:<br> 任务执行无需严格顺序，通过事件驱动机制触发后续操作。</li><li>‌<strong>背压(Back-pressure)</strong> ‌ ‌:<br> 消费者动态控制数据流量的机制，防止生产端过载导致系统崩溃。</li></ol><blockquote><p>此范式通过 ‌<strong>Reactive Streams 规范</strong>‌（如 Project Reactor 实现）提供标准化流控支持5，是构建高吞吐、低延迟系统的核心方案。</p></blockquote><h3 id="_1-3-为什么需要用到响应式处理" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么需要用到响应式处理"><span>1.3 为什么需要用到响应式处理?</span></a></h3><div class="hint-container info"><p class="hint-container-title">为什么需要用到响应式处理?</p><p>官方说法如下：</p><blockquote><h1 id="why-use-reactive-processing" tabindex="-1"><a class="header-anchor" href="#why-use-reactive-processing"><span>Why use reactive processing?</span></a></h1><p>Reactive systems better utilize modern processors. Also, the inclusion of back-pressure in reactive programming ensures better resilience between decoupled components.</p></blockquote><p>翻译过来则是:</p><blockquote><h1 id="为何采用响应式处理" tabindex="-1"><a class="header-anchor" href="#为何采用响应式处理"><span>为何采用响应式处理?</span></a></h1><p>响应式系统能更充分地‌<strong>发挥现代处理器的效能</strong>‌。此外，响应式编程中引入的‌<strong>背压机制(Back-pressure)</strong> ‌，可显著增强‌<strong>解耦组件间的系统弹性</strong></p></blockquote></div><div class="hint-container important"><p class="hint-container-title"><strong>响应式处理</strong> 的<strong>核心价值</strong> 如下:</p><blockquote><p><strong>现代的处理器效能优化</strong></p><ul><li><p>传统的阻塞模型难以利用多核CPU的资源，<strong>响应式</strong> 则可以通过异步非阻塞调用 最大化硬件利用率</p></li><li><p>例如： 单线程异步处理万级并发请求 如：<code>Netflix</code> 网关</p></li></ul></blockquote><blockquote><p><strong>背压的弹性价值</strong></p><ul><li><strong>问题场景</strong><ul><li>生产者(如数据源)速率 &gt; 消费者(如服务) 的处理能力的时候，则会导致内存溢出或者服务崩溃</li></ul></li><li><strong>解决机制</strong><ul><li>消费者通过背压动态反馈需求，生产者自适应调整数据流速(如 TCP滑动窗口的软件实现)</li></ul></li><li><strong>架构收益</strong><ul><li>解耦组件间形成自调节流量缓冲带,避免级联故障</li></ul></li></ul></blockquote><blockquote><p><strong>响应式架构</strong> 通过 <strong>资源效率</strong> + <strong>流控韧性</strong> 成为了云原生和微服务的核心支撑技术。</p></blockquote></div><h3 id="_1-4-基于-spring-boot-的响应式微服务架构‌" tabindex="-1"><a class="header-anchor" href="#_1-4-基于-spring-boot-的响应式微服务架构‌"><span>1.4 <strong>基于 Spring Boot 的响应式微服务架构</strong>‌</span></a></h3><figure><img src="'+g+'" alt="image-20250626134543421" tabindex="0" loading="lazy"><figcaption>image-20250626134543421</figcaption></figure><blockquote><p>从图中我们可以看到，我们以前使用的<code>SpringMVC</code>架构，即右边的<code>Servlet Stack</code>,<code>Servlet 堆栈</code>，它是<strong>阻塞IO架构</strong> ,<code>One-Request-Per-Thread</code>模型。</p></blockquote><blockquote><p>而我们的基于<code>SpringBoot</code>的响应式微服务架构，即左边的图，<code>Reactive Stack</code>, <code>响应式堆栈</code>,它最底层基于<code>netty</code>,<code>Servlet 3.1+ Containers</code>，实现了<code>Reactive Streas Adapters</code> , 从而又有了<code>Spring WebFlux</code>、<code>Spring Security Reactive</code> 等框架。它是<strong>异步非阻塞IO模型</strong> ,可以使用少量的线程支撑更多的并发请求。</p></blockquote><h2 id="【2】-响应式编程学习路线图" tabindex="-1"><a class="header-anchor" href="#【2】-响应式编程学习路线图"><span>【2】 响应式编程学习路线图</span></a></h2><figure><img src="'+i+'" alt="reactive-programming-learn" tabindex="0" loading="lazy"><figcaption>reactive-programming-learn</figcaption></figure><h2 id="【3】参考资料" tabindex="-1"><a class="header-anchor" href="#【3】参考资料"><span>【3】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1gsYEeLEuM?spm_id_from=333.788.videopod.episodes&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">SpringBoot3响应式编程精讲</a></li></ul>',25))])}const k=s(h,[["render",b]]),q=JSON.parse('{"path":"/md/note/reactive/reactive_001.html","title":"第一章: 走进响应式编程","lang":"zh-CN","frontmatter":{"description":"第一章: 走进响应式编程 说在前面的话，本文为个人学习SpringBoot3响应式编程精讲后进行总结的文章，本文主要用于响应式编程。 【1】响应式编程介绍 我们可以打开Spring的官网找到Reactive的相关资料。响应式资料链接 1.1 什么是响应式? 什么是响应式(Reactive)系统? 首先，看下官网定义 Reactive Reactive ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章: 走进响应式编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-04T06:08:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钱鹏展\\",\\"url\\":\\"https://github.com/pengzhanqian\\"}]}"],["meta",{"property":"og:url","content":"https://pengzhanqian.github.io/blog/md/note/reactive/reactive_001.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"第一章: 走进响应式编程"}],["meta",{"property":"og:description","content":"第一章: 走进响应式编程 说在前面的话，本文为个人学习SpringBoot3响应式编程精讲后进行总结的文章，本文主要用于响应式编程。 【1】响应式编程介绍 我们可以打开Spring的官网找到Reactive的相关资料。响应式资料链接 1.1 什么是响应式? 什么是响应式(Reactive)系统? 首先，看下官网定义 Reactive Reactive ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-04T06:08:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-04T06:08:40.000Z"}]]},"git":{"createdTime":1751549516000,"updatedTime":1751609320000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":2}]},"readingTime":{"minutes":3.65,"words":1094},"filePathRelative":"md/note/reactive/reactive_001.md","autoDesc":true}');export{k as comp,q as data};
