import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as o,f as a,d as r,w as l,r as i,o as p,b as n}from"./app-BxRTHQDl.js";const g={},h={class:"table-of-contents"};function m(b,t){const e=i("router-link"),d=i("Mermaid");return p(),u("div",null,[t[12]||(t[12]=o("h1",{id:"算法-算法和数据结构",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#算法-算法和数据结构"},[o("span",null,"算法 - 算法和数据结构")])],-1)),o("nav",h,[o("ul",null,[o("li",null,[r(e,{to:"#【1】算法-algorithm"},{default:l(()=>t[0]||(t[0]=[n("【1】算法（Algorithm）")])),_:1,__:[0]}),o("ul",null,[o("li",null,[r(e,{to:"#【1-1】算法定义"},{default:l(()=>t[1]||(t[1]=[n("【1.1】算法定义")])),_:1,__:[1]})]),o("li",null,[r(e,{to:"#【1-2】算法核心特性"},{default:l(()=>t[2]||(t[2]=[n("【1.2】算法核心特性")])),_:1,__:[2]})]),o("li",null,[r(e,{to:"#【1-3】算法关键衡量指标"},{default:l(()=>t[3]||(t[3]=[n("【1.3】算法关键衡量指标")])),_:1,__:[3]})]),o("li",null,[r(e,{to:"#【1-4】常见算法类型"},{default:l(()=>t[4]||(t[4]=[n("【1.4】常见算法类型")])),_:1,__:[4]})])])]),o("li",null,[r(e,{to:"#【2】数据结构-data-structure"},{default:l(()=>t[5]||(t[5]=[n("【2】数据结构（Data Structure）")])),_:1,__:[5]}),o("ul",null,[o("li",null,[r(e,{to:"#【2-1】数据结构定义"},{default:l(()=>t[6]||(t[6]=[n("【2.1】数据结构定义")])),_:1,__:[6]})]),o("li",null,[r(e,{to:"#【2-2】数据结构核心目的"},{default:l(()=>t[7]||(t[7]=[n("【2.2】数据结构核心目的")])),_:1,__:[7]})]),o("li",null,[r(e,{to:"#【2-3】常见数据结构对比"},{default:l(()=>t[8]||(t[8]=[n("【2.3】常见数据结构对比")])),_:1,__:[8]})])])]),o("li",null,[r(e,{to:"#【3】算法-数据结构-程序‌"},{default:l(()=>t[9]||(t[9]=[n("【3】算法 + 数据结构 = 程序‌")])),_:1,__:[9]})]),o("li",null,[r(e,{to:"#【4】为什么重要"},{default:l(()=>t[10]||(t[10]=[n("【4】为什么重要?")])),_:1,__:[10]})]),o("li",null,[r(e,{to:"#【5】参考资料"},{default:l(()=>t[11]||(t[11]=[n("【5】参考资料")])),_:1,__:[11]})])])]),t[13]||(t[13]=a('<blockquote><p>说在前面的话，本文为个人学习<a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a>后进行总结的文章，主要是以<code>Java</code>来运行算法.</p></blockquote><blockquote><p><b>算法</b>和<b>数据结构</b>是计算机科学的两大核心基石，它们共同构建了高效程序的骨架。</p></blockquote><h2 id="【1】算法-algorithm" tabindex="-1"><a class="header-anchor" href="#【1】算法-algorithm"><span>【1】算法（Algorithm）</span></a></h2><h3 id="【1-1】算法定义" tabindex="-1"><a class="header-anchor" href="#【1-1】算法定义"><span>【1.1】算法定义</span></a></h3><blockquote><p><strong>定义</strong>‌：解决特定问题的‌<strong>步骤序列</strong>‌，类似烹饪食谱。</p></blockquote><h3 id="【1-2】算法核心特性" tabindex="-1"><a class="header-anchor" href="#【1-2】算法核心特性"><span>【1.2】算法核心特性</span></a></h3><blockquote><ul><li><strong>输入</strong>‌ → 接收数据</li><li><strong>输出</strong>‌ → 产生结果</li><li><strong>明确性</strong>‌ → 每个步骤无歧义</li><li><strong>有限性</strong>‌ → 在有限步骤内结束</li><li><strong>可行性</strong>‌ → 能用基本操作实现</li></ul></blockquote><h3 id="【1-3】算法关键衡量指标" tabindex="-1"><a class="header-anchor" href="#【1-3】算法关键衡量指标"><span>【1.3】算法关键衡量指标</span></a></h3><blockquote><ul><li><strong>时间复杂度</strong>‌：执行时间随输入规模的增长趋势（如 <code>O(n)</code>、<code>O(log n)</code>）</li><li><strong>空间复杂度</strong>‌：内存占用随输入规模的增长趋势</li><li><strong>正确性</strong>‌ → 能否解决问题</li><li><strong>可读性与健壮性</strong>‌ → 代码是否易理解、能处理异常</li></ul></blockquote><h3 id="【1-4】常见算法类型" tabindex="-1"><a class="header-anchor" href="#【1-4】常见算法类型"><span>【1.4】常见算法类型</span></a></h3>',10)),r(d,{code:"eJxLL0osyFDwCeJyjH6+bvqzzVNjFXR17RScop/1TXq6qx8qxuUIFnWOfjZhzvMti1BFXaKfzt6HKuQa/bRrxbOGxhfLW552TIrlcoIYahj9dP/qlw3zIWbrP9076enObRBOLJczxArD6Ce7ep52tD2bv/RZ575YLheIHYbRLplZ2cUlRYnP5jQ8n7/2xfb1T/e1xHK5QuwzjH7R3PO0p/Xl9HUvF82I5QIAIU5nnA=="}),t[14]||(t[14]=a('<h2 id="【2】数据结构-data-structure" tabindex="-1"><a class="header-anchor" href="#【2】数据结构-data-structure"><span>【2】数据结构（Data Structure）</span></a></h2><h3 id="【2-1】数据结构定义" tabindex="-1"><a class="header-anchor" href="#【2-1】数据结构定义"><span>【2.1】数据结构定义</span></a></h3><blockquote><p><strong>定义</strong>‌：存储和组织数据的‌<strong>特定方式</strong>‌，类似收纳箱的设计。</p></blockquote><h3 id="【2-2】数据结构核心目的" tabindex="-1"><a class="header-anchor" href="#【2-2】数据结构核心目的"><span>【2.2】数据结构核心目的</span></a></h3><blockquote><ul><li><strong>高效访问</strong>‌ → 快速查找/修改数据</li><li><strong>优化内存</strong>‌ → 减少空间浪费</li><li><strong>适配操作</strong>‌ → 针对场景选择最佳结构</li></ul></blockquote><h3 id="【2-3】常见数据结构对比" tabindex="-1"><a class="header-anchor" href="#【2-3】常见数据结构对比"><span>【2.3】常见数据结构对比</span></a></h3><table><thead><tr><th>结构</th><th>特点</th><th>典型应用</th></tr></thead><tbody><tr><td>数组(Array)</td><td>连续内存，随机访问快</td><td>按索引快速读取</td></tr><tr><td>链表(Linked List)</td><td>非连续内存，插入删除快</td><td>动态大小集合</td></tr><tr><td>栈(Stack)</td><td>后进先出（LIFO）</td><td>函数调用栈/撤销操作</td></tr><tr><td>队列(Queue)</td><td>先进先出（FIFO）</td><td>任务调度/消息缓冲</td></tr><tr><td>哈希表(Hash Map)</td><td>键值对，平均O(1)查找</td><td>字典/缓存系统</td></tr><tr><td>树(Tree)</td><td>分层结构（如二叉树、B树）</td><td>数据库索引/文件系统</td></tr><tr><td>图(Graph)</td><td>节点与边的关系网络</td><td>社交网络/路径规划</td></tr></tbody></table><h2 id="【3】算法-数据结构-程序‌" tabindex="-1"><a class="header-anchor" href="#【3】算法-数据结构-程序‌"><span>【3】<strong>算法 + 数据结构 = 程序</strong>‌</span></a></h2><blockquote><p>二者的关系如同 ‌<b>“灵魂与骨架”</b>：</p><ul><li>‌<strong>数据结构决定数据如何存储</strong>‌<br> → 选择链表还是数组存储100万条数据？</li><li>‌<strong>算法决定如何处理数据</strong>‌<br> → 用冒泡排序(O(n²))还是快速排序(O(n log n))？</li></ul><p>‌<strong>经典案例</strong>‌：</p><ul><li>‌<strong>字典查询</strong>‌： <ul><li>用‌<strong>哈希表</strong>‌存储单词 → O(1)时间查词</li><li>若用无序数组 → 最坏O(n)时间遍历所有词</li></ul></li><li>‌<strong>导航路径</strong>‌： <ul><li>用‌<b>图(Graph)</b> 存储道路节点</li><li>用‌<strong>Dijkstra算法</strong>‌计算最短路径</li></ul></li></ul></blockquote><h2 id="【4】为什么重要" tabindex="-1"><a class="header-anchor" href="#【4】为什么重要"><span>【4】为什么重要?</span></a></h2><blockquote><ol><li><strong>性能差距</strong>‌：<br> 二分查找(<code>O(log n)</code>)比遍历查找(<code>O(n)</code>)快100万倍（当n=100万时）</li><li>‌<strong>资源优化</strong>‌：<br> 堆(<code>Heap</code>)管理内存的效率远高于无序列表</li><li><strong>问题建模能力</strong>‌：<br> 社交网络用图(<code>Graph</code>)建模好友关系 → 实现“好友推荐”</li></ol></blockquote><h2 id="【5】参考资料" tabindex="-1"><a class="header-anchor" href="#【5】参考资料"><span>【5】参考资料</span></a></h2><ul><li><a href="https://www.bilibili.com/video/BV1Ef4y1T7Qi/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=65c7f6924d2d8ba5fa0d4c448818e08a" target="_blank" rel="noopener noreferrer">B站免费的左程云算法结构基础课</a></li></ul>',13))])}const _=s(g,[["render",m]]),k=JSON.parse('{"path":"/md/algorithm/algorithm_001.html","title":"算法 - 算法和数据结构","lang":"zh-CN","frontmatter":{"description":"算法 - 算法和数据结构 说在前面的话，本文为个人学习B站免费的左程云算法结构基础课后进行总结的文章，主要是以Java来运行算法. 算法和数据结构是计算机科学的两大核心基石，它们共同构建了高效程序的骨架。 【1】算法（Algorithm） 【1.1】算法定义 定义‌：解决特定问题的‌步骤序列‌，类似烹饪食谱。 【1.2】算法核心特性 输入‌ → 接收数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法 - 算法和数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-12T07:13:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钱鹏展\\",\\"url\\":\\"https://github.com/pengzhanqian\\"}]}"],["meta",{"property":"og:url","content":"https://pengzhanqian.github.io/blog/md/algorithm/algorithm_001.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"算法 - 算法和数据结构"}],["meta",{"property":"og:description","content":"算法 - 算法和数据结构 说在前面的话，本文为个人学习B站免费的左程云算法结构基础课后进行总结的文章，主要是以Java来运行算法. 算法和数据结构是计算机科学的两大核心基石，它们共同构建了高效程序的骨架。 【1】算法（Algorithm） 【1.1】算法定义 定义‌：解决特定问题的‌步骤序列‌，类似烹饪食谱。 【1.2】算法核心特性 输入‌ → 接收数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-12T07:13:28.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-12T07:13:28.000Z"}]]},"git":{"createdTime":1754891322000,"updatedTime":1754982808000,"contributors":[{"name":"钱鹏展","username":"","email":"873373549@qq.com","commits":4}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"md/algorithm/algorithm_001.md","autoDesc":true}');export{_ as comp,k as data};
